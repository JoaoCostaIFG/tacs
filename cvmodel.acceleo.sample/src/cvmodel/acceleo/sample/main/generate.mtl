[comment encoding = UTF-8 /]
[module generate('http://cvmodel/cv')]

[template public generateContent(c : Content, prefix: String) post(trim())]
[if (c.url.oclIsUndefined())]
[prefix/] [c.name/]
[else]
[prefix/] ['['/][c.name/][']'/]([c.url/])
[/if]
[if (not c.url.oclIsUndefined() or not c.address.oclIsUndefined()) ]

	[if (not c.url.oclIsUndefined())]
- ['['/][c.url/][']'/]([c.url/])
	[/if]
	[if (not c.address.oclIsUndefined())]
- [c.address.country/]
	[/if]
[/if]
[if (not c.description.oclIsUndefined())]

[c.description/]
[/if]
[/template]

[template public generateSectionTitle(s : Section, prefix: String) post(trim())]
[prefix/] [s.name/] Section
[/template]

[template public generateSectionBody(s : Section, prefix: String) post(trim())]
[for (c : Content | s.content->sortedBy(c | c.order))]

[generateContent(c, prefix + '#')/]
[/for]
[for (s : Section | s.sections->sortedBy(s | s.order))]

[generateSection(s, prefix + '#')/]
[/for]
[/template]

[template public generateSection(s : Section, prefix: String) post(trim())]
[generateSectionTitle(s, prefix)/]
[generateSectionBody(s, prefix)/]
[/template]

[template public generateSection(s : IdentificationSection, prefix: String) post(trim())]
[generateSectionTitle(s, prefix)/]

[prefix/]# Person

- First name(s): [s.person.firstNames/]
[generateSectionBody(s, prefix)/]
[/template]

[template public generateCv(aCV : CV)]
[comment @main/]
[file (aCV.sectionLayer.identificationSection.person.firstNames.substituteAll(' ', '_') + '.cv.md', false, 'UTF-8')]
# [for (Sequence{aCV.sectionLayer.identificationSection.person.firstNames, aCV.sectionLayer.identificationSection.person.lastNames}) separator (' ')][self/][/for]'s CV

[generateSection(aCV.sectionLayer.identificationSection, '##')/]
[for (s : Section | aCV.sectionLayer.sections->sortedBy(s | s.order))]

[generateSection(self, '##')/]
[/for]
[/file]
[/template]
