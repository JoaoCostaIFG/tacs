[comment encoding = UTF-8 /]
[module generateSection('http://cvmodel/cv')]

[import cvmodel::acceleo::sample::files::generateContent /]

[template private generateSectionTitle(s : Section, prefix: String) post(trim())]
[prefix/] [s.name/]
[/template]

[template private generateSectionBody(s : Section, prefix: String) post(trim())]
[for (c : Content | s.content->sortedBy(c | c.order))]

[generateContent(c)/]
[/for]
[for (s : Section | s.sections->sortedBy(s | s.order))]

[generateSection(s, prefix + '#')/]
[/for]
[/template]

[template private generateSection(s : Section, prefix: String) post(trim())]
[generateSectionTitle(s, prefix)/]
[generateSectionBody(s, prefix)/]
[/template]

[template public generateSection(s : Section) post(trim())]
[generateSection(s, '##')/]
[/template]

[template public generateSection(s : IdentificationSection, prefix: String) post(trim())]
[prefix/] [for (Sequence{s.person.firstNames, s.person.lastNames}) separator (' ')][self/][/for]
[if (not s.person.title.oclIsUndefined())][s.person.title/][/if]

- First name(s): [s.person.firstNames/]
[if (not s.person.lastNames.oclIsUndefined())]
- Last name(s): [s.person.lastNames/]
[/if]
[if (not s.person.title.oclIsUndefined())]
- Title: [s.person.title/]
[/if]
[if (not s.person.dateOfBirth.oclIsUndefined())]
- Date of birth: [s.person.dateOfBirth/]
[/if]
[if (s.person.gender <> Gender::DONOTINDICATE)]
- Gender: [s.person.gender.toString().toLower().toUpperFirst()/]
[/if]
[if (s.person.maritalStatus <> MaritalStatus::DONOTINDICATE)]
- Marital status: [s.person.maritalStatus.toString().toLower().toUpperFirst()/]
[/if]
[if (s.person.nationalities->size() = 1)]
- Nationality: [s.person.nationalities->at(1)/]
[elseif (s.person.nationalities->size() > 0)]
- Nationalities:
	[for (s.person.nationalities)]
    - [self/]
	[/for]
[/if]
[if (s.person.contacts->size() > 0)]
- Contacts:
	[for (s.person.contacts)]
    [generateContact(self)/]
	[/for]
[/if]
[if (s.person.addresses->size() > 0)]
- Addresses:
	[for (s.person.addresses)]
    [generateAddress(self)/]
	[/for]
[/if]
[generateSectionBody(s, prefix)/]
[/template]

[template public generateSection(s : SkillSection, prefix: String) post(trim())]
[/template]
